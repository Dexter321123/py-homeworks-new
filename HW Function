documents = [
        {"type": "passport", "number": "2207 876234", "name": "Василий Гупкин"},
        {"type": "invoice", "number": "11-2", "name": "Геннадий Покемонов"},
        {"type": "insurance", "number": "10006", "name": "Аристарх Павлов"},
        {"type": "passport", "number": "2324 852176", "name": "Геннадий Покемонов"}
      ] 

directories = {
        '1': ['2207 876234', '11-2'],
        '2': ['10006'],
        '3': []
      }



def smart_find_in_docs(*args, **kwargs):

  if len(kwargs.keys()) != 1 or len(args) < 1:
    raise "Использование программы не по назначению"
  answers = []
  argument = list(kwargs.keys())[0]
  value = kwargs[argument]
  print("{}: {}".format(argument, value))
  for dictionary in documents:
    if dictionary[argument] == value:
      this_part_passed = True
      answers.append(dictionary)
      summary_str = "  "
      for i, arg in enumerate(args):
        summary_str += "{}: {}".format(arg, dictionary[arg]) + (", " if (i + 1) != len(args) else ";")
      print(summary_str)
  try:
    if this_part_passed:
      pass
  except:
    print("  Нет результатов")
  return answers

smart_find_in_docs("type", "number", name="Геннадий Покемонов")
smart_find_in_docs("type", "number", name="Гадя Петрович")

def get_person_by_number():
  smart_find_in_docs("name", number=input("Введите номер документа:"))

def print_list():
  print("Данные:")
  for dictionary in documents:
    summary_str = ""
    for i, tup in enumerate(dictionary.items()):
      
      adapter = lambda i: ('"{}" ' if i != 0 else '{} ') 
      summary_str += adapter(i).format(tup[1])
    print(summary_str)


def get_shelf_by_number():
  needed_number = input("Введите номер документа:")
  try:
    for shelf, list_of_shelf in directories.items():
      for number in list_of_shelf:
        if needed_number == number:
          print("Документ на полке: {}".format(shelf))
          raise "Нашли полку"
    print('Документа под номером "{}" в базе нет'.format(needed_number))
  except:
    pass


def add_new_data():
  buff_dictionary = dict(
    type = input("Введите тип документа:"),
    number = input("Введите номер документа:"),
    name = input("Введите имя владельца:")
  )

  def add_to_dirs(shelf_number):
    if shelf_number not in directories: #
      directories[shelf_number] = list()
    directories[shelf_number].append(buff_dictionary["number"])

  add_to_dirs(input("Введите номер полки документа:"))
  documents.append(buff_dictionary)

def delete_doc():
  doc_number = input("Введите номер документа:")
  something_is_deleted = False
  for i, dictionary in enumerate(documents):
    if dictionary["number"] == doc_number:
      documents.pop(i)
      something_is_deleted = True
      break
  for tupl in directories.items():
    if doc_number in tupl[1]:
      print(tupl, tupl[1])
      if len(tupl[1]) == 1: 
        directories.pop(tupl[0])
      else:
        tupl[1].remove(doc_number)
      something_is_deleted = True
      break
  if something_is_deleted:
    print("Документ удален")
  else:
    print("Документ не обнаружен")

def move_doc():
  doc_number = input("Введите номер документа:")
  new_shelf = input("Введите номер новой полки:")
  for shelf_number, books_on_shelf in directories.items():
    try:
      books_on_shelf.remove(doc_number) 
      if new_shelf not in directories.keys():
        directories[new_shelf] = []
      directories[new_shelf].append(doc_number)
      print("Перенос осуществлен")
      return
    except:
      pass
  print("Документ не обнаружен")

def add_shelf():
  new_shelf = input("Введите номер полки:")
  if new_shelf in directories.keys():
    print("Полка уже существует")
    return
  directories[new_shelf] = []

def main():
  def menu_adapter(func): 
    print()
    func()
    print()

  try:
    menu_list = [
        get_person_by_number,
        print_list,
        get_shelf_by_number,
        add_new_data,
        delete_doc,
        move_doc,
        add_shelf,
        lambda: print("Полки:", directories, sep = "\n")
      ]
    while(True):
      print("Введите номер или для выхода: все, кроме этих цифр:",
        "1) Получить информацию о документе по имени человека;",
        "2) Получить полный список документов;",
        "3) Получить номер полки документа по его номеру;",
        "4) Добавить новый документ;",
        "5) Удалить документ из перечня и из каталога;",
        "6) Перенос документа между полок;",
        "7) Добавить полку;",
        "8) + Вывести полки;",
        sep = "\n"
      )
      user_input = int(input()) - 1
      menu_adapter(menu_list[user_input if user_input >= 0 else 'quit'])
  except:
    print("Успешный выход")

main()
